// Generated by CoffeeScript 1.3.3

define(function(require) {
  var Interface, Logger;
  Logger = require('common/Logger');
  return Interface = (function() {

    function Interface(name, methods) {
      var i, _i, _ref;
      if (arguments.length !== 2) {
        throw new Error("Interface constructor called with " + arguments.length + "arguments, but expected exactly 2.");
      }
      this.name = name;
      this.methods = [];
      for (i = _i = 0, _ref = methods.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (typeof methods[i] !== "string") {
          throw new Error("Interface constructor expects method names to be" + "passed in as a string.");
        }
        this.methods.push(methods[i]);
      }
    }

    Interface.ensureImplements = function(object) {
      var i, interf, j, method, _i, _j, _ref, _ref1;
      if (arguments.length < 2) {
        throw new Error("Function Interface.ensureImplements called with " + arguments.length + "arguments, but expected at least 2.");
      }
      for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        interf = arguments[i];
        if (interf.constructor !== Interface) {
          throw new Error("Function Interface.ensureImplements expects arguments " + "two and above to be instances of Interface.");
        }
        for (j = _j = 0, _ref1 = interf.methods.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          method = interf.methods[j];
          if (!(object != null) || !object[method] || typeof object[method] !== "function") {
            Logger.error('object:', object, 'caller:', arguments.callee.caller);
            throw new Error("Function Interface.ensureImplements: object " + "does not implement the " + interf.name + " interface. Method " + method + " was not found.");
          }
        }
      }
    };

    return Interface;

  })();
});
